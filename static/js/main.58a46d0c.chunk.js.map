{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","fetchApi","a","fetch","Area","res","json","data","setData","useState","Location","setLocation","SetArea","Data","d","Date","useEffect","className","type","value","onChange","e","target","placeholder","onClick","location","name","country","src","current","condition","icon","text","temp_c","toDateString","style","listStyleType","wind_kph","wind_degree","wind_dir","pressure_mb","precip_mm","humidity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPA+EeA,MA3Ef,WACE,IAAMC,EAAQ,uCAAG,8BAAAC,EAAA,sEACGC,MAAM,oFAAD,OAAqFC,IAD7F,cACTC,EADS,gBAEIA,EAAIC,OAFR,OAETC,EAFS,OAGfC,EAAQD,GAHO,2CAAH,qDADD,EAQmBE,mBAAS,IAR5B,mBAQNC,EARM,KAQIC,EARJ,OASWF,mBAAS,SATpB,mBASNL,EATM,KASAQ,EATA,OAUWH,mBAAS,IAVpB,mBAUNI,EAVM,KAUAL,EAVA,KAWPM,EAAI,IAAIC,KAQd,OALAC,qBAAU,WAAQf,MAAc,CAACG,IAM/B,qBAAKa,UAAU,MAAf,SACE,qBAAKA,UAAU,aAAf,SACE,sBAAKA,UAAU,YAAf,UAEE,sBAAKA,UAAU,aAAf,UACE,uBAAOA,UAAU,YAAYC,KAAK,OAAOC,MAAOT,EAAUU,SAAU,SAACC,GACnEV,EAAYU,EAAEC,OAAOH,QACpBI,YAAY,kBACf,wBAAQN,UAAU,eAAeO,QAAS,WACxCZ,EAAQF,IADV,SAGG,mBAAGO,UAAU,0BAQlB,8BACGJ,EAAKY,SAEJ,sBAAKR,UAAU,kBAAf,UACE,gCAAMJ,EAAKY,SAASC,KAApB,IAA2Bb,EAAKY,SAASE,WACzC,qBAAKC,IAAKf,EAAKgB,QAAQC,UAAUC,OACjC,8BAAMlB,EAAKgB,QAAQC,UAAUE,OAC7B,gCAAMnB,EAAKgB,QAAQI,OAAnB,WACA,8BAAMnB,EAAEoB,iBACR,8BAEE,sBAAKjB,UAAU,gBAAf,UACE,qBAAIkB,MAAO,CAACC,cAAc,QAA1B,UACE,6CAAgBvB,EAAKgB,QAAQQ,SAAU,GAAvC,SACA,8CAAiBxB,EAAKgB,QAAQS,YAA9B,UACA,iDAAoBzB,EAAKgB,QAAQU,eAEnC,qBAAIJ,MAAO,CAACC,cAAc,QAA1B,UACE,2CAAcvB,EAAKgB,QAAQW,YAAa,GAAxC,QACA,gDAAmB3B,EAAKgB,QAAQY,UAAW,GAA3C,QACA,2CAAc5B,EAAKgB,QAAQa,SAAU,iBAM3C,2DCzDDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.58a46d0c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\n\nfunction App() {\n  const fetchApi = async () => {\n    const res = await fetch(`http://api.weatherapi.com/v1/forecast.json?key=b2fd3e03718846b5aac165256212707&q=${Area}`)\n    const data = await res.json()\n    setData(data)\n      ;\n\n  }\n  const [Location, setLocation] = useState(\"\")\n  const [Area, SetArea] = useState(\"Delhi\")\n  const [Data, setData] = useState({})\n  const d = new Date()\n\n\n  useEffect(() => { fetchApi() }, [Area])\n\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"parant-div\">\n        <div className=\"child-div\">\n          {/* search bar */}\n          <div className=\"search-bar\">\n            <input className=\"input-bar\" type=\"text\" value={Location} onChange={(e) => {\n              setLocation(e.target.value)\n            }} placeholder=\"eg.Mungeli...\" />\n            <button className=\"input-button\" onClick={() => {\n              SetArea(Location)\n\n            }}><i className=\"fas fa-cloud-sun\"></i></button>\n\n\n\n\n          </div>\n          {/* -------------------------------------------------------- */}\n          {/* output section */}\n          <div>\n            {Data.location ?\n              // data section\n              <div className=\"weather-con-div\">\n                <div>{Data.location.name},{Data.location.country}</div>\n                <img src={Data.current.condition.icon} />\n                <div>{Data.current.condition.text}</div>\n                <div>{Data.current.temp_c}°c</div>\n                <div>{d.toDateString()}</div>\n                <div>\n                  {/* wind data */}\n                  <div className=\"wind-pressure\">\n                    <ul style={{listStyleType:'none'}}>\n                      <li>wind-speed:{Data.current.wind_kph}{\"\"}kph</li>\n                      <li>wind-degree:{Data.current.wind_degree}°</li>\n                      <li>wind-diraction:{Data.current.wind_dir}</li>\n                    </ul>\n                    <ul style={{listStyleType:'none'}} >\n                      <li>Pressure:{Data.current.pressure_mb}{\"\"}mb</li>\n                      <li>Precipitation:{Data.current.precip_mm}{\"\"}mm</li>\n                      <li>Humidity:{Data.current.humidity}{\"\"}</li>\n                       </ul>\n                  </div>\n                </div>\n              </div>\n\n              : <div>data not found</div>\n            }\n          </div>\n          {/* ---------------------------------------------------------- */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}